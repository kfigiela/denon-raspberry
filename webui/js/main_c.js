// Generated by CoffeeScript 1.9.1
var Button, CDMode, DenonUI, Header, Icon, InfoMode, ModeSelector, MusicMode, TunerMode, Volume;

Button = React.createClass({
  handleClick: function(evt) {
    evt.preventDefault();
    return this.props.onCommand(this.props.command);
  },
  render: function() {
    return React.createElement("a", React.__spread({
      "href": "#",
      "onClick": this.handleClick,
      "className": "btn btn-default"
    }, this.props), this.props.children);
  }
});

Icon = React.createClass({
  render: function() {
    return React.createElement("i", {
      "className": "fa " + this.props.name
    });
  }
});

ModeSelector = React.createClass({
  modes: [
    {
      command: "ir:SRC_DRA_TUNER",
      icon: "fa-rss",
      name: "Tuner"
    }, {
      command: "ir:SRC_DNP_INTERNET_RADIO",
      icon: "fa-signal",
      name: "Internet Radio"
    }, {
      command: "ir:SRC_DNP_ONLINE_MUSIC",
      icon: "fa-music",
      name: "Music Player"
    }, {
      command: "ir:SRC_DNP_MUSIC_SERVER",
      icon: "fa-toggle-down",
      name: "AirPlay"
    }, {
      command: "ir:SRC_DCD_CD",
      icon: "fa-dot-circle-o",
      name: "CD"
    }, {
      command: "ir:SRC_DRA_DIGITAL",
      icon: "fa-laptop",
      name: "Digital"
    }, {
      command: "ir:SRC_DRA_ANALOG",
      icon: "fa-external-link-square",
      name: "Analog"
    }
  ],
  network_modes: {
    radio: {
      icon: "fa-signal",
      name: "Internet Radio"
    },
    music: {
      icon: "fa-music",
      name: "Music Player"
    },
    airplay: {
      icon: "fa-toggle-down",
      name: "AirPlay"
    },
    "null": {
      icon: "fa-rss",
      name: "Network Player"
    }
  },
  sources: {
    network: {
      icon: "fa-music",
      name: "Network"
    },
    cd: {
      icon: "fa-dot-circle-o",
      name: "CD"
    },
    aux1: {
      icon: "fa-external-link-square",
      name: "Analog 1"
    },
    aux2: {
      icon: "fa-external-link-square",
      name: "Analog 2"
    },
    tuner: {
      icon: "fa-rss",
      name: "Tuner"
    },
    digital: {
      icon: "fa-laptop",
      name: "Digital"
    }
  },
  render: function() {
    var currentSource, modeButtons;
    modeButtons = this.modes.map((function(_this) {
      return function(mode) {
        return React.createElement("li", {
          "key": mode.command
        }, React.createElement(Button, {
          "onCommand": _this.props.onCommand,
          "command": mode.command,
          "className": "btn-ws"
        }, React.createElement(Icon, {
          "name": mode.icon
        }), " ", mode.name));
      };
    })(this));
    currentSource = this.props.data.denon.amp.power === "on" ? this.props.data.denon.amp.source !== "network" ? this.sources[this.props.data.denon.amp.source] : this.network_modes[this.props.data.denon.mode] : {
      icon: "fa-power-off",
      name: "Off"
    };
    document.title = currentSource.name + " | " + this.props.data.denon.amp.audio.volume + " ðŸ”Š";
    return React.createElement("div", null, React.createElement("a", {
      "href": "#",
      "data-toggle": "dropdown",
      "className": "navbar-brand dropdown-toggle"
    }, React.createElement(Icon, {
      "name": currentSource.icon
    }), " ", currentSource.name, " ", React.createElement("b", {
      "className": "caret"
    })), React.createElement("ul", {
      "className": "dropdown-menu"
    }, modeButtons));
  }
});

Header = React.createClass({
  render: function() {
    var sleepStatus;
    sleepStatus = this.props.data.denon.amp.sleep && (Date.parse(this.props.data.denon.amp.sleep) - Date.now()) > 0 ? Math.round((Date.parse(this.props.data.denon.amp.sleep) - Date.now()) / 60000) + " mins" : "off";
    return React.createElement("nav", {
      "className": "navbar"
    }, React.createElement("div", {
      "className": "container"
    }, React.createElement("div", {
      "className": "navbar-header"
    }, React.createElement("button", {
      "type": "button",
      "data-toggle": "collapse",
      "data-target": ".navbar-collapse",
      "className": "navbar-toggle"
    }, React.createElement(Icon, {
      "name": "fa-bars"
    })), React.createElement(ModeSelector, {
      "data": this.props.data,
      "onCommand": this.props.onCommand
    })), React.createElement("div", {
      "className": "navbar-collapse collapse"
    }, React.createElement("ul", {
      "className": "nav navbar-nav navbar-right"
    }, React.createElement("li", null, React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "ir:KEY_POWER",
      "className": "btn-ws"
    }, React.createElement(Icon, {
      "name": "fa-power-off"
    }), " Power (", this.props.data.denon.amp.power, ")")), React.createElement("li", null, React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "ir:KEY_DISPLAYTOGGLE",
      "className": "btn-ws"
    }, React.createElement(Icon, {
      "name": "fa-sun-o"
    }), " Display (", this.props.data.denon.amp.display_brightness, ")")), React.createElement("li", null, React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "ir:KEY_SLEEP",
      "className": "btn-ws"
    }, React.createElement(Icon, {
      "name": "fa-clock-o"
    }), " Sleep (", sleepStatus, ")"))))));
  }
});

CDMode = React.createClass({
  handleClick: function(evt) {
    evt.preventDefault();
    return this.props.onCommand($(evt.currentTarget).data('command'));
  },
  render: function() {
    return React.createElement("div", null, React.createElement("div", {
      "className": "btn-group btn-group-lg btn-group-justified"
    }, React.createElement(Button, {
      "command": "cd_ir:CD_PLAY",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-play"
    })), React.createElement(Button, {
      "command": "cd_ir:CD_PAUSE",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-pause"
    })), React.createElement(Button, {
      "command": "cd_ir:CD_STOP",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-stop"
    }))), React.createElement("div", {
      "className": "btn-group btn-group-lg btn-group-justified"
    }, React.createElement(Button, {
      "command": "cd_ir:CD_BKW",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-backward"
    })), React.createElement(Button, {
      "command": "cd_ir:CD_PREV",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-fast-backward"
    })), React.createElement(Button, {
      "command": "cd_ir:CD_NEXT",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-fast-forward"
    })), React.createElement(Button, {
      "command": "cd_ir:CD_FWD",
      "onCommand": this.props.onCommand
    }, React.createElement(Icon, {
      "name": "fa-forward"
    }))));
  }
});

TunerMode = React.createClass({
  render: function() {
    var stationName, stations;
    stationName = this.props.data.denon.amp.radio.current_preset && this.props.data.denon.amp.radio.presets[this.props.data.denon.amp.radio.current_preset] ? this.props.data.denon.amp.radio.presets[this.props.data.denon.amp.radio.current_preset].name : this.props.data.denon.amp.radio.current_frequency.toFixed(2) + " MHz";
    stations = Object.keys(this.props.data.denon.amp.radio.presets).map((function(_this) {
      return function(id) {
        var addClass, station;
        station = _this.props.data.denon.amp.radio.presets[id];
        addClass = _this.props.data.denon.amp.radio.current_preset === id ? "btn-primary" : "";
        return React.createElement(Button, {
          "onCommand": _this.props.onCommand,
          "key": "st_" + id,
          "className": "col-xs-6 btn btn-default btn-lg " + addClass,
          "command": "tuner:tune:" + id
        }, station.name);
      };
    })(this));
    return React.createElement("div", null, React.createElement("h1", null, stationName), React.createElement("div", {
      "className": "row btn-group"
    }, stations));
  }
});

MusicMode = React.createClass({
  render: function() {
    var base;
    return React.createElement("div", null, React.createElement("div", {
      "className": "btn-group btn-group-lg btn-group-justified"
    }, React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "mpd:prev_album"
    }, React.createElement(Icon, {
      "name": "fa-arrow-circle-left"
    })), React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "mpd:prev"
    }, React.createElement(Icon, {
      "name": "fa-fast-backward"
    })), React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "mpd:pause"
    }, React.createElement(Icon, {
      "name": typeof (base = this.props.data.mpd.status.state === "play") === "function" ? base({
        "fa-pause": "fa-play"
      }) : void 0
    })), React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "mpd:next"
    }, React.createElement(Icon, {
      "name": "fa-fast-forward"
    })), React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "mpd:next_album"
    }, React.createElement(Icon, {
      "name": "fa-arrow-circle-right"
    }))), React.createElement("h1", null, this.props.data.mpd.song.artist), React.createElement("h2", null, this.props.data.mpd.song.title), React.createElement("h4", null, this.props.data.mpd.song.album));
  }
});

InfoMode = React.createClass({
  render: function() {
    return React.createElement("h1", {
      "style": {
        textAlign: "center"
      }
    }, React.createElement(Icon, {
      "name": this.props.icon + " fa-4x"
    }), React.createElement("br", null), React.createElement("br", null), " ", this.props.children);
  }
});

Volume = React.createClass({
  handleClick: function(evt) {
    evt.preventDefault();
    return this.props.onCommand($(evt.currentTarget).data('command'));
  },
  render: function() {
    var getVolume;
    getVolume = (function(_this) {
      return function() {
        if (_this.props.data.denon.amp.audio.mute) {
          return React.createElement("i", {
            "className": "fa fa-volume-off"
          });
        } else {
          return _this.props.data.denon.amp.audio.volume;
        }
      };
    })(this);
    return React.createElement("nav", {
      "className": "navbar navbar-fixed-bottom"
    }, React.createElement("div", {
      "className": "container"
    }, React.createElement("div", {
      "className": "btn-group btn-group-lg btn-group-justified"
    }, React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "ir:KEY_VOLUMEDOWN"
    }, React.createElement(Icon, {
      "name": "fa-minus"
    })), React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "ir:KEY_MUTE"
    }, getVolume()), React.createElement(Button, {
      "onCommand": this.props.onCommand,
      "command": "ir:KEY_VOLUMEUP"
    }, React.createElement(Icon, {
      "name": "fa-plus"
    })))));
  }
});

DenonUI = React.createClass({
  componentDidMount: function() {
    this.ws = new WebSocket("ws://10.0.42.42:8080");
    return this.ws.onmessage = (function(_this) {
      return function(m) {
        var status;
        status = JSON.parse(m.data);
        return _this.setState({
          data: status
        });
      };
    })(this);
  },
  handleCommand: function(cmd) {
    return this.ws.send(cmd);
  },
  render: function() {
    var currentMode;
    if (this.state) {
      currentMode = (function() {
        if (this.state.data.denon.amp.power === "on") {
          switch (this.state.data.denon.amp.source) {
            case "cd":
              return React.createElement(CDMode, {
                "data": this.state.data,
                "onCommand": this.handleCommand
              });
            case "tuner":
              return React.createElement(TunerMode, {
                "data": this.state.data,
                "onCommand": this.handleCommand
              });
            case "network":
              switch (this.state.data.denon.mode) {
                case "radio":
                  return React.createElement(MusicMode, {
                    "data": this.state.data,
                    "onCommand": this.handleCommand
                  });
                case "music":
                  return React.createElement(MusicMode, {
                    "data": this.state.data,
                    "onCommand": this.handleCommand
                  });
                case "airplay":
                  return React.createElement(InfoMode, {
                    "icon": "fa-toggle-down"
                  }, "AirPlay");
                default:
                  return React.createElement("h1", null, "Network player");
              }
              break;
            case "digital":
              return React.createElement(InfoMode, {
                "icon": "fa-laptop fa-4x"
              }, "Digital");
            case "aux1":
              return React.createElement(InfoMode, {
                "icon": "fa-external-link-square"
              }, "Analog 1");
            case "aux2":
              return React.createElement(InfoMode, {
                "icon": "fa-external-link-square"
              }, "Analog 2");
            default:
              return React.createElement("div", null, "not supported");
          }
        } else {
          return React.createElement(InfoMode, {
            "icon": "fa-power-off"
          }, React.createElement(Button, {
            "onCommand": this.handleCommand,
            "command": "ir:KEY_POWER",
            "className": "btn btn-lg btn-success btn-ws"
          }, "Turn on!"));
        }
      }).call(this);
      return React.createElement("div", null, React.createElement(Header, {
        "data": this.state.data,
        "onCommand": this.handleCommand
      }), currentMode, React.createElement(Volume, {
        "data": this.state.data,
        "onCommand": this.handleCommand
      }));
    } else {
      return React.createElement("div", null, "connecting\u2026");
    }
  }
});

React.render(React.createElement(DenonUI, null), document.getElementById('app'));

